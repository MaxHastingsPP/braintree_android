buildscript {
    repositories {
        mavenCentral()
        google()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    def sdkTargetJavaVersion = JavaVersion.VERSION_1_8
    ext.versions = [
            "kotlin"         : "1.8.10",
            "androidxTest"   : "1.5.0",
            "powermock"      : '2.0.9',
            "powermockLegacy": "1.7.4",
            "room"           : "2.5.1",
            "playServices"   : "19.1.0",
            "javaSourceCompatibility": sdkTargetJavaVersion,
            "javaTargetCompatibility": sdkTargetJavaVersion,
    ]

    ext.deps = [
            "appCompat"                  : "androidx.appcompat:appcompat:1.3.1",
            "annotation"                 : "androidx.annotation:annotation:1.2.0",
            "coreKtx"                    : "androidx.core:core-ktx:1.10.0",

            // TODO: update to DefaultLifecycleObserver
            "lifecycleRuntime"           : "androidx.lifecycle:lifecycle-runtime:2.6.1",

            // Ref: https://kotlinlang.org/docs/whatsnew18.html#updated-jvm-compilation-target
            "kotlinStdLib"               : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
            "kotlinTest"                 : "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
            // This library doesn't seem to follow the versioning pattern of the other jetbrains
            // kotlin libraries. Make sure to keep this dependency in line with the kotlin version used.
            "kotlinCoroutinesCore"       : "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2",

            "browserSwitch"              : "com.braintreepayments.api:browser-switch:2.3.2",
            "cardinal"                   : "org.jfrog.cardinalcommerce.gradle:cardinalmobilesdk:2.2.7-2",
            "samsungPay"                 : "com.samsung.android.spay:sdk:2.5.01",
            "playServicesWallet"         : "com.google.android.gms:play-services-wallet:${versions.playServices}",

            "work"                       : "androidx.work:work-runtime:2.7.1",
            "workTesting"                : "androidx.work:work-testing:2.7.1",

            "roomCompiler"               : "androidx.room:room-compiler:${versions.room}",
            "roomRuntime"                : "androidx.room:room-runtime:${versions.room}",

            "androidxTestRules"          : "androidx.test:rules:${versions.androidxTest}",
            "androidxTestRunner"         : "androidx.test:runner:${versions.androidxTest}",
            "androidxTestCore"           : "androidx.test:core:${versions.androidxTest}",

            "junit"                      : "junit:junit:4.13",
            "junitTest"                  : "androidx.test.ext:junit:1.1.3",
            "robolectric"                : "org.robolectric:robolectric:4.7.3",
            "dexmakerMockito"            : "com.google.dexmaker:dexmaker-mockito:1.2",
            "mockitoCore"                : "org.mockito:mockito-core:3.6.0",
            "jsonAssert"                 : "org.skyscreamer:jsonassert:1.5.1",
            "mockk"                      : "io.mockk:mockk:1.13.4",

            "powermockJunit"             : "org.powermock:powermock-module-junit4:${versions.powermock}",
            "powermockRule"              : "org.powermock:powermock-module-junit4-rule:${versions.powermock}",
            "powermockMockito"           : "org.powermock:powermock-api-mockito2:${versions.powermock}",
            "powermockClassloading"      : "org.powermock:powermock-classloading-xstream:${versions.powermock}",

            // Legacy versions of the powermock libraries are required until 3DS and Visa Checkout tests can be updated to resolve robolectric/powermock test issues
            "powermockJunitLegacy"       : "org.powermock:powermock-module-junit4:${versions.powermockLegacy}",
            "powermockRuleLegacy"        : "org.powermock:powermock-module-junit4-rule:${versions.powermockLegacy}",
            "powermockMockitoLegacy"     : "org.powermock:powermock-api-mockito:${versions.powermockLegacy}",
            "powermockClassloadingLegacy": "org.powermock:powermock-classloading-xstream:${versions.powermockLegacy}",
    ]

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0'
        classpath 'de.marcphilipp.gradle:nexus-publish-plugin:0.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.5.3'
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.8.10'
        classpath 'org.jetbrains.dokka:android-documentation-plugin:1.8.10'
    }
}

plugins {
    id 'org.jetbrains.dokka' version '1.7.10'
    id 'io.codearte.nexus-staging' version '0.30.0'
    id 'de.marcphilipp.nexus-publish' version '0.4.0' apply false
    id 'com.github.ben-manes.versions' version '0.46.0'
}

ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID') ?: ''
ext["signing.password"] = System.getenv('SIGNING_KEY_PASSWORD') ?: ''
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_KEY_FILE') ?: ''

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

version '4.28.1-SNAPSHOT'
ext {
    compileSdkVersion = 33
    minSdkVersion = 21
    versionCode = 170
    targetSdkVersion = 33
    versionName = version
}

nexusStaging {
    packageGroup = project.hasProperty('nexusPackageGroup') ? project.getProperty('nexusPackageGroup') : 'com.braintreepayments'
    // give nexus sonatype more time to close the staging repository
    delayBetweenRetriesInMillis = 20000
    username = System.getenv('SONATYPE_USERNAME')
    password = System.getenv('SONATYPE_PASSWORD')
}

subprojects {
    repositories {
        maven {
            url "https://cardinalcommerceprod.jfrog.io/artifactory/android"
            credentials {
                username 'braintree_team_sdk'
                password 'AKCp8jQcoDy2hxSWhDAUQKXLDPDx6NYRkqrgFLRc3qDrayg6rrCbJpsKKyMwaykVL8FWusJpp'
            }
        }
    }
}

dokkaHtmlMultiModule.configure {
    // redirect dokka output to GitHub pages root directory
    outputDirectory.set(project.file("docs"))
}

task changeGradleReleaseVersion {
    doLast {
        def gradleFile = file('build.gradle')
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion '" + versionParam + "'")
        gradleFile.write(gradleFileText)
    }
}

task changeREADMEVersion {
    doLast {

        def readmeFile = file('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":card:\\d+\\.\\d+\\.\\d+'", ":card:" + versionParam + "'")
        readmeFile.write(readmeFileText)
    }
}

task changeMigrationGuideVersion {
    doLast {
        def migrationGuideFile = file('v4_MIGRATION_GUIDE.md')
        def migrationGuideFileText = migrationGuideFile.text.replaceAll(":\\d+\\.\\d+\\.\\d+(-.*)?'", ":" + versionParam + "'")
        migrationGuideFile.write(migrationGuideFileText)

        def newMigrationGuideFile = file('v4.9.0+_MIGRATION_GUIDE.md')
        def newMigrationGuideFileText = newMigrationGuideFile.text.replaceAll(":\\d+\\.\\d+\\.\\d+(-.*)?'", ":" + versionParam + "'")
        newMigrationGuideFile.write(newMigrationGuideFileText)
    }
}

task updateCHANGELOGVersion {
    doLast {
        def changelogFile = file('CHANGELOG.md')
        def changelogFileText = changelogFile.text.replaceFirst("## unreleased", "## " + versionParam)
        changelogFile.write(changelogFileText)
    }
}

task incrementSNAPSHOTVersion {
    doLast {
        def gradleFile = file('build.gradle')
        def (major, minor, patch) = versionParam.tokenize('.')
        def patchInteger = patch.toInteger()
        def newVersion = "$major.$minor.${patchInteger + 1}-SNAPSHOT"
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion '" + newVersion + "'")
        gradleFile.write(gradleFileText)

        // update README snapshot version
        def readmeFile = file('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":card:\\d+\\.\\d+\\.\\d+-SNAPSHOT'", ":card:" + newVersion + "'")
        readmeFile.write(readmeFileText)
    }
}

task incrementVersionCode {
    doLast {
        def gradleFile = file('build.gradle')
        def versionText = gradleFile.text.find("versionCode = \\d+")
        def params = versionText.split("=")
        def newVersionCode = params[1].trim().toInteger() + 1
        def gradleFileText = gradleFile.text.replaceFirst("versionCode = \\d+", "versionCode = " + newVersionCode)
        gradleFile.write(gradleFileText)
    }
}

// Ref: https://github.com/ben-manes/gradle-versions-plugin#tasks
def isUnstable = { version ->
    def unstableKeywords = ['alpha', 'beta', 'rc']
    return unstableKeywords.any { version.toLowerCase().contains(it) }
}

// check for non-alpha dependency updates
tasks.named('dependencyUpdates').configure {
    rejectVersionIf { isUnstable(it.candidate.version) }
}